# -*- coding: utf-8 -*-
"""Cópia de MLP-XOR-BIAS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eAHKBuE81dvhIwlt_5_d7ev7QgLXklnx

***
# <font color=black size=6> <b>MLP - Exemplo - Operador XOR</font>
***

# <font color=black>1 Importando Bibliotecas</font>
"""

import numpy as np

"""# <font color=black>2 Parâmetros de entrada, saída, pesos e taxa de Aprendizagem</font>"""

entradas = np.array([[0,0,1],[0,1,1], [1,0,1], [1,1,1]])
saidas = np.array([[0],[1],[1],[0]])
#pesos0=np.array([[-0.424,-0.740,-0.961, 1],[0.358,-0.577,-0.469, 1],[0.358,-0.577,-0.369, 1]])
pesos0=np.random.random((3,4))-1

#pesos1=np.array([[-0.017],[-0.893],[0.148],[0.218]])
pesos1=np.random.random((4,1))-1

epocas=1000
taxaAprendizagem = 0.6
momento = 1

"""# <font color=black>3 Funções Auxiliares</font>"""

def sigmoid(soma):
	  return 1/(1+np.exp(-soma))

def sigmoidDerivada(sig):
    return sig*(1-sig)

"""# <font color=black>4 Treinamento da rede neural</font>"""

x=[]
y=[]
p=[]
for j in range(epocas):
    camadaEntrada = entradas
    somaSinapse0 = np.dot(camadaEntrada,pesos0)
    camadaOculta = sigmoid(somaSinapse0)
    for neur in camadaOculta:
      neur[neur.shape[0]-1]=1
    print(camadaOculta)
    somaSinapse1 = np.dot(camadaOculta, pesos1)
    camadaSaida = sigmoid(somaSinapse1)
    erroCamadaSaida=saidas-camadaSaida
    mediaAbsoluta=np.mean(np.abs(erroCamadaSaida))
    print("Erro: " + str(mediaAbsoluta))
    x.append(j)
    y.append(mediaAbsoluta)
    p.append(pesos1[0])
    derivadaSaida = sigmoidDerivada(camadaSaida)
    deltaSaida = erroCamadaSaida * derivadaSaida
    pesos1Transposta=pesos1.T
    deltaSaidaXPeso=deltaSaida.dot(pesos1Transposta)
    
    deltaCamadaOculta=deltaSaidaXPeso *sigmoidDerivada(camadaOculta)

    camadaOcultaTransposta = camadaOculta.T
    pesosNovo1 = camadaOcultaTransposta.dot(deltaSaida)
    pesos1 = (pesos1 * momento) + (pesosNovo1 * taxaAprendizagem)

    camadaEntradaTransposta = camadaEntrada.T
    pesosNovo0 = camadaEntradaTransposta.dot(deltaCamadaOculta)
    pesos0 = (pesos0 * momento)+(pesosNovo0*taxaAprendizagem)

from matplotlib.pyplot import *
from numpy import *
plot(x,y)
xlabel("Iteração")
ylabel("erro")
print(x)
show()